apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app: {{ .Release.Name }}
    spec:
      hostAliases:
        - ip: "127.0.0.1"
          hostnames:
            - "postgres"
            - "keycloak-postgres"
            - "keycloak"
            - "nodejs"
            - "proxy"
            - "repeater"
      containers:
        - name: postgres
          image: postgres
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 60
            periodSeconds: 30
          env:
            - name: POSTGRES_DB
              value: "bc"
            - name: POSTGRES_USER
              value: "bc"
            - name: POSTGRES_PASSWORD
              value: "bc"
          resources:
            requests:
              cpu: 200m
              memory: 100Mi
          volumeMounts:
          - name: {{ include "brokencrystals.fullname" . }}-postgres
            mountPath: /docker-entrypoint-initdb.d/pg.sql
            subPath: pg.sql
            readOnly: true       

        - name: keycloak-postgres
          image: postgres:12.2-alpine
          ports:
            - containerPort: 5433
          livenessProbe:
            tcpSocket:
              port: 5433
            initialDelaySeconds: 60
            periodSeconds: 30
          env:
            - name: POSTGRES_DB
              value: "keycloak"
            - name: POSTGRES_USER
              value: "keycloak"
            - name: POSTGRES_PASSWORD
              value: "password"
          resources:
            requests:
              cpu: 100m
              memory: 50Mi          
          volumeMounts:
          - name: {{ include "brokencrystals.fullname" . }}-keycloak-postgres
            mountPath: /usr/local/share/postgresql/postgresql.conf.sample
            subPath: postgresql.conf.sample
            readOnly: true

        - name: keycloak
          image: quay.io/keycloak/keycloak:16.1.1
          resources:
            requests:
              cpu: 200m
              memory: 500Mi
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
          env:
            - name: DB_VENDOR
              value: "POSTGRES"
            - name: DB_ADDR
              value: "keycloak-postgres"
            - name: DB_PORT
              value: "5433"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_SCHEMA
              value: "public"
            - name: DB_PASSWORD
              value: "password"
            - name: KEYCLOAK_USER
              value: "admin"
            - name: KEYCLOAK_PASSWORD
              value: "Pa55w0rd"
            - name: KEYCLOAK_IMPORT
              value: "/opt/jboss/keycloak/imports/realm-export.json -Dkeycloak.profile.feature.upload_scripts=enabled"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: KEYCLOAK_FRONTEND_URL
              value: "https://auth{{ .Values.ingress.authlevel }}{{ .Values.ingress.url }}/auth/"
          volumeMounts:
          - name: {{ include "brokencrystals.fullname" . }}-keycloak
            mountPath: /opt/jboss/keycloak/imports/realm-export.json
            subPath: realm-export.json
            readOnly: true

        - name: nodejs
          image: brightsec/brokencrystals:{{ .Values.images.main }}
          env:
            - name: URL
              value: "https://{{ .Values.ingress.url }}"
            - name: DATABASE_HOST
              value: "postgres"
            - name: DATABASE_SCHEMA
              value: "bc"
            - name: DATABASE_USER
              value: "bc"
            - name: DATABASE_PASSWORD
              value: "bc"
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_DEBUG
              value: "true"
            - name: AWS_BUCKET
              value: "https://neuralegion-open-bucket.s3.amazonaws.com"
            - name: GOOGLE_MAPS_API
              value: "AIzaSyD2wIxpYCuNI0Zjt8kChs2hLTS5abVQfRQ"
            - name: JWT_PRIVATE_KEY_LOCATION
              value: "config/keys/jwtRS256.key"
            - name: JWT_PUBLIC_KEY_LOCATION
              value: "config/keys/jwtRS256.key.pub.pem"
            - name: JWT_SECRET_KEY
              value: "1234"
            - name: JWK_PRIVATE_KEY_LOCATION
              value: "config/keys/jwk.key.pem"
            - name: JWK_PUBLIC_KEY_LOCATION
              value: "config/keys/jwk.pub.key.pem"
            - name: JWK_PUBLIC_JSON 
              value: "config/keys/jwk.pub.json"
            - name: JKU_URL
              value: "https://raw.githubusercontent.com/NeuraLegion/brokencrystals/development/config/keys/jku.json"
            - name: X5U_URL
              value: "https://raw.githubusercontent.com/NeuraLegion/brokencrystals/development/config/keys/x509.crt"
          volumeMounts:
          - name: {{ include "brokencrystals.fullname" . }}-nginx-proxy
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: default.conf
            readOnly: true
          resources:
            requests:
              cpu: 900m
              memory: 1024Mi
            limits:
              memory: 15G
          livenessProbe:
            httpGet:
              path: /api/config
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
        
        {{- if and .Values.repeaterID .Values.token .Values.cluster }}
        - name: repeater
          image: brightsec/cli{{ if ne .Values.repeaterImageTag "" }}:{{ .Values.repeaterImageTag }}{{ else }}:latest{{ end }}
          command: ["bright-cli", "repeater"]
          args:
          - "--token=$(TOKEN)"
          - "--id=$(REPEATER_ID)"
          - "--cluster=$(CLUSTER)" 
          - "--timeout=$(TIMEOUT)"         
          resources:
            requests:
              cpu: 200m
              memory: 100Mi
          env:
            - name: REPEATER_ID
              value: "{{ .Values.repeaterID }}"
            - name: TOKEN
              value: "{{ .Values.token }}"
            - name: CLUSTER
              value: "{{ .Values.cluster }}"
            - name: TIMEOUT
              value: "{{ .Values.timeout | default "30000" }}"
        {{- end }}
      restartPolicy: Always

      volumes:
      - name: {{ include "brokencrystals.fullname" . }}-postgres
        configMap:
          name: {{ include "brokencrystals.fullname" . }}-postgres
      - name: {{ include "brokencrystals.fullname" . }}-keycloak-postgres
        configMap:
          name: {{ include "brokencrystals.fullname" . }}-keycloak-postgres
      - name: {{ include "brokencrystals.fullname" . }}-keycloak
        configMap:
          name: {{ include "brokencrystals.fullname" . }}-keycloak
      - name: {{ include "brokencrystals.fullname" . }}-nginx-proxy
        configMap:
          name: {{ include "brokencrystals.fullname" . }}-nginx-proxy
